CREATE QUERY shortest_ss_no_wt_json (VERTEX source, STRING v_type, STRING e_type, BOOL display) {
/* This query is Single_source Shortest Path without weights on edges. It calculates the shortest distance from the given vertex source to all other connected vertices, and shows one shortest path between them.
This JSON version also shows visualization of the network.
*/

    MinAccum<INT> @dis;
    OrAccum @visited;
    ListAccum<VERTEX> @path;
    SetAccum<EDGE> @@edge_set;

    #### Initialization ####
    start = {source};
    start = SELECT s FROM start:s
            ACCUM
                s.@visited += true,
                s.@dis = 0,
                s.@path = s
            ;
    result_set = {source};

    #### Calculate distances and paths ####
    WHILE (start.size() > 0) DO
        start = SELECT t FROM start:s -(e_type:e)-> :t
                WHERE t.@visited == false
                ACCUM
                    t.@dis += s.@dis + 1,
                    t.@path = s.@path + [t],
                    t.@visited += true
                ;
        result_set = result_set UNION start;
    END;

    #### Print the results ####
    PRINT result_set[result_set.@dis, result_set.@path];
    IF display THEN
        result_set = SELECT s FROM result_set:s -(e_type:e)-> :t
                     ACCUM @@edge_set += e;
        print @@edge_set;
    END;

}
