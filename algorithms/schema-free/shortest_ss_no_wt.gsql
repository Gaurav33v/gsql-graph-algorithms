CREATE QUERY shortest_ss_no_wt (VERTEX source, SET<STRING> v_type, SET<STRING> e_type, 
  BOOL print_accum = TRUE, STRING int_result_attr = "", STRING file_path = "",
  BOOL display_edges = FALSE) {
/* This query is Single-Source Shortest Path without weights on edges. It calculates the
shortest distance from the given vertex source to all other connected vertices, and shows
one shortest path between them. The JSON version also show visualization of the network. 
The attribute version only store the distance into attribute, not the path.
*/

	FILE f(file_path);
	MinAccum<INT> @dis;
	OrAccum @visited;
	ListAccum<VERTEX> @path;
	SetAccum<EDGE> @@edgeSet;

	##### Initialization  #####
	Source = {source};
	Source = SELECT s 
			 FROM Source:s
			 ACCUM s.@visited += true, 
				   s.@dis = 0,
				   s.@path = s; 
	ResultSet = {source};

	##### Calculate distances and paths #####
	WHILE(Source.size()>0) DO
		Source = SELECT t
				 FROM Source:s -(e_type:e)-> v_type:t
				 WHERE t.@visited == false
				 ACCUM t.@dis += s.@dis + 1,
					   t.@path = s.@path + [t],
					   t.@visited += true
				ORDER BY getvid(t);
		ResultSet = ResultSet UNION Source;
	END;

	IF file_path != "" THEN
		f.println("Vertex_ID","Distance","Shortest_Path");
	END;

	ResultSet = SELECT s FROM ResultSet:s 
				POST-ACCUM 
					IF int_result_attr != "" THEN s.setAttr(int_result_attr, s.@dis) END,
					IF file_path != "" THEN f.println(s, s.@dis, s.@path) END
	;


	IF print_accum THEN
	
		PRINT ResultSet[ResultSet.@dis, ResultSet.@path];
		IF display_edges THEN

			ResultSet = SELECT s FROM ResultSet:s -(e_type:e)-> v_type:t
			ACCUM @@edgeSet += e;
			PRINT @@edgeSet;
		END;
	END;
}