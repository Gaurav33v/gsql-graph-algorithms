CREATE QUERY shortest_ss_any_wt (VERTEX source, SET<STRING> v_type, SET<STRING> e_type,
 STRING wt_attr, STRING wt_type, BOOL print_accum = TRUE, STRING float_result_attr = "",
 STRING file_path = "", BOOL display_edges = FALSE) {
/* The Bellman-Ford algorithm for Single-Source Shortest Path with edge weights,
 possibly negative.
 If any loop in the graph has a net negative weight, the algorithm will exit.
*/

	TYPEDEF TUPLE<FLOAT dist, VERTEX pred> Path_Tuple;    
	HeapAccum<Path_Tuple>(1, dist ASC) @minPath;       # retain 1 shortest path
	ListAccum<STRING> @path;         				  # shortest path FROM source
	SetAccum<EDGE> @@edgeSet;        	# list of all edges, if display_edges is needed
	OrAccum @visited;
	FILE f(file_path);
	INT iter;

	OrAccum @@hasNegLoop;                 # Indicates a negative loop is found
	BOOL excep_caught;
	STRING msg40998 = "wt_attr must be numeric: INT, FLOAT, or DOUBLE"; 
	STRING msg40999 = "There is a loop with negative length. Shortest path is undefined.";
	EXCEPTION non_numeric_excep (40998); 
	EXCEPTION neg_loop_excep (40999);

	##### Initialize #####
	start = {source};
	component = {source};                 # the connected component of the source vertex
	start = SELECT s
			FROM start:s
			POST-ACCUM s.@minPath += Path_Tuple(0, s),
				  s.@visited = TRUE,
				  s.@path += s.id;
	
	##### Get the connected component #####		  
	WHILE start.size() > 0 DO
		start = SELECT t
				FROM start:s -(e_type:e)-> v_type:t
				WHERE NOT t.@visited
				ACCUM t.@visited = TRUE;
		component = component UNION start;
	END;
	PRINT component.size();
	
	##### Do N-1 iterations: Consider whether each edge lowers the best-known distance.
	iter = component.size() - 1;    # the max iteration is N-1
	WHILE TRUE LIMIT iter DO 
		tmp = SELECT s
			FROM component:s -(e_type:e)-> v_type:t
			ACCUM 
				IF s.@minPath.size()>0 /*AND s.@minPath.top().dist < GSQL_INT_MAX*1.0*/ THEN
          CASE wt_type
          WHEN "INT" THEN
					  t.@minPath += Path_Tuple(s.@minPath.top().dist + e.getAttr(wt_attr, "INT"), s)
          WHEN "FLOAT" THEN
            t.@minPath += Path_Tuple(s.@minPath.top().dist + e.getAttr(wt_attr, "FLOAT"), s)
          WHEN "DOUBLE" THEN
            t.@minPath += Path_Tuple(s.@minPath.top().dist + e.getAttr(wt_attr, "DOUBLE"), s)
          ELSE
             excep_caught = TRUE
          END
				END;
      IF excep_caught THEN
          RAISE non_numeric_excep (msg40998);
      END;
	END;

	 
	##### Check for loops with net negative weight #####
	component = SELECT s
		FROM component:s -(e_type:e)-> v_type:t
		ACCUM CASE wt_type
          WHEN "INT" THEN
					  @@hasNegLoop +=
			s.@minPath.top().dist + e.getAttr(wt_attr,"INT") < t.@minPath.top().dist
          WHEN "FLOAT" THEN
            @@hasNegLoop +=
			s.@minPath.top().dist + e.getAttr(wt_attr,"FLOAT") < t.@minPath.top().dist
          WHEN "DOUBLE" THEN
            @@hasNegLoop +=
			s.@minPath.top().dist + e.getAttr(wt_attr,"DOUBLE") < t.@minPath.top().dist   
          ELSE
             excep_caught = TRUE
          END;
      IF excep_caught THEN
          RAISE non_numeric_excep (msg40998);
      END;   
 
	IF @@hasNegLoop THEN        
		RAISE neg_loop_excep (msg40999);
	END;


	##### Calculate the paths #####
	start = {source};
	tmp = SELECT s
		  FROM component:s
		  WHERE s != source
		  POST-ACCUM s.@visited = FALSE;
	WHILE start.size() > 0 LIMIT iter DO		 # Limit the number of hops
		start = SELECT t
				FROM start:s -(e_type:e)-> v_type:t
				WHERE NOT t.@visited
				ACCUM IF s == t.@minPath.top().pred THEN 
						  t.@visited = TRUE,
						  t.@path += s.@path,
						  t.@path += t.id
					  END;
	END;
	
	##### Output #####
	IF file_path != "" THEN
	  f.println("Vertex_ID","Distance","Shortest_Path");
	END;

	component = SELECT s FROM component:s
			POST-ACCUM 
			  IF float_result_attr != "" THEN s.setAttr(float_result_attr, s.@minPath.top().dist) END,
			  IF file_path != "" THEN f.println(s, s.@minPath.top().dist, s.@path) END;
		  
	IF print_accum THEN
		PRINT component[component.@minPath.top().dist, component.@path];
		IF display_edges THEN
			tmp = SELECT s
				  FROM component:s -(e_type:e)-> v_type:t
				  ACCUM @@edgeSet += e;
			PRINT @@edgeSet;
		END;
	END;
}