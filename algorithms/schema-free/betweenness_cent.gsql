CREATE QUERY betweenness_cent(SET<STRING> v_type, SET<STRING> e_type, INT max_hops = 10,
  INT top_k=100, BOOL print_accum=TRUE, STRING result_attr="", STRING file_path="",
  BOOL display_edges = FALSE) {
  /*
  Compute Betweenness Centrality for each VERTEX. Parameters:
  v_type: vertex types to traverse                 print_accum: print JSON output
  e_type: edge types to traverse                 result_attr: INT attr to store results to
  max_hops: look only this far from each vertex    file_path: file to write CSV output to
  output_limit: report only this many top scores   display_edges: output edges for visualization
  */
	TYPEDEF TUPLE<VERTEX Vertex_ID, FLOAT score> VertexScore;
	HeapAccum<VertexScore>(top_k, score DESC) @@topScores;
	MapAccum<VERTEX, SumAccum<FLOAT>> @@BC;
	SumAccum<FLOAT> @score;
	SetAccum<EDGE> @@edgeSet;
	FILE f (file_path);
	Start = {v_type};
  
  
# Compute betweenness
	Start = SELECT s FROM Start:s
          # Calculatee Betweenness Centrality for each vertex
          ACCUM @@BC += bc_subquery(s, v_type,e_type, max_hops)
          POST-ACCUM 
            IF print_accum THEN @@topScores += VertexScore(s, @@BC.get(s)) END,
            IF result_attr != "" THEN s.setAttr(result_attr, @@BC.get(s)) END,  
            IF file_path != "" THEN f.println(s, @@BC.get(s)) END;
  
# Output
	IF file_path != "" THEN
		f.println("Vertex_ID", "Betweenness");
	END;
	IF print_accum THEN
		PRINT @@topScores AS top_scores;
		IF display_edges THEN
			PRINT Start[Start.@score];
			Start = SELECT s
			FROM Start:s -(e_type:e)->:t
				ACCUM @@edgeSet += e;
			PRINT @@edgeSet;
		END;
	END;
}