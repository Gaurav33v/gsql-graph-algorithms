CREATE QUERY jaccard_nbor_ap_sub_json (VERTEX source, STRING v_type, STRING e_type, INT top_k) RETURNS (MapAccum<VERTEX, FLOAT>) {
/* This subquery calculates the Jaccard Similarity between a given vertex and every other vertex.
Jaccard similarity = intersection_size / (size_A + size_B - intersection_size)
*/
    MapAccum<VERTEX, FLOAT> @@top_k_result_map;
    SumAccum<INT> @intersection_size, @@set_size_A, @set_size_B;
    SumAccum<FLOAT> @similarity;

    start = {source};
    start = SELECT s FROM start:s ACCUM @@set_size_A += s.outdegree(e_type);

    subjects = SELECT t FROM start:s -(e_type:e)-> :t;

    others = SELECT t FROM subjects:s -(e_type:e)-> :t
        WHERE t != source
        ACCUM t.@intersection_size += 1,
              t.@set_size_B = t.outdegree(e_type)
        POST-ACCUM t.@similarity = t.@intersection_size*1.0/(@@set_size_A + t.@set_size_B - t.@intersection_size)
        ORDER BY t.@similarity DESC
        LIMIT top_k;

    others = SELECT s FROM others:s
             ACCUM @@top_k_result_map += (s -> s.@similarity);
    RETURN @@top_k_result_map;
}

CREATE QUERY jaccard_nbor_ap_json (STRING v_type, STRING e_type, INT top_k) {
/* This query calls the subquery jaccard_nbor_ap_sub*EXT* to get the similarity score of every pair of vertices.
1. The JSON and FILE version keeps the top k pairs of vertices. The result in FILE version is not in order.
2. The Attribute version insert edges between the pairs, with the score as an edge attribute. 
   A similarity edge with one float attribute in the schema is required for this version.  
*/
    MapAccum<VERTEX, FLOAT> @result;
    start = {v_type.*};

    start = SELECT s FROM start:s
        POST-ACCUM s.@result = jaccard_nbor_ap_sub(s, v_type, e_type, top_k);
    PRINT start.@result;
}
