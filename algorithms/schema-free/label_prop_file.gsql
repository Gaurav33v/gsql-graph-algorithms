CREATE QUERY label_prop_file (STRING v_type, STRING e_type, INT max_iter, FILE f) {
# Partition the vertices into communities, according to the Label Propagation method.
# Indicate community membership by assigning each vertex a community ID.

    OrAccum @@changed = true;
    MapAccum<int, int> @map;     # <communityId, numNeighbors>
    MapAccum<int, int> @@comm_sizes;   # <communityId, members>
    SumAccum<int> @label, @num;    
    start = {v_type.*};

# Assign unique labels to each vertex
    start = SELECT s FROM start:s ACCUM s.@label = getvid(s);

# Propagate labels to neighbors until labels converge or the max iterations is reached
    WHILE @@changed == true LIMIT max_iter DO
        @@changed = false;
        start = SELECT s 
                FROM start:s -(e_type:e)-> :t
                ACCUM t.@map += (s.@label -> 1)  # count the occurrences of neighbor's labels
                POST-ACCUM
                    INT max_v = 0,
                    INT label = 0,
                    # Iterate over the map to get the neighbor label that occurs most often
                    FOREACH (k,v) IN t.@map DO
                        CASE WHEN v > max_v THEN
                                max_v = v,
                                label = k
                        END
                    END,
                    # When the neighbor search finds a label AND it is a new label
                    # AND the label's count has increased, update the label.
                    CASE WHEN label != 0 AND t.@label != label AND max_v > t.@num THEN
                        @@changed += true,
                        t.@label = label,
                        t.@num = max_v
                    END,
                    t.@map.clear();
    END;

    start = {v_type.*};
    f.println("Vertex_ID", "Label");
    start = SELECT s FROM start:s
            POST-ACCUM f.println(s, s.@label);
}
