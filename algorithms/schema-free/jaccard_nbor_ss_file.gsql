CREATE QUERY jaccard_nbor_ss_file (VERTEX source, STRING v_type, STRING e_type1, STRING e_type2, INT top_k, FILE f) {
/* This query calculates the Jaccard Similarity between a given vertex and every other vertex.
Jaccard similarity = intersection_size / (size_A + size_B - intersection_size)
1. The JSON and FILE version keeps the top k pairs of vertices. The result in FILE version is not in order.
2. The Attribute version insert edges between the pairs, with the score as an edge attribute.
   A similarity edge with one FLOAT attribute in the schema is required for this version.
*/
    SumAccum<INT> @intersection_size, @@set_size_A, @set_size_B;
    SumAccum<FLOAT> @similarity;

    start = {source};
    start = SELECT s FROM start:s ACCUM @@set_size_A += s.outdegree(e_type1);

    subjects = SELECT t FROM start:s -(e_type1:e)-> :t;

    others = SELECT t FROM subjects:s -(e_type2:e)-> :t
        WHERE t != source
        ACCUM t.@intersection_size += 1,
              t.@set_size_B = t.outdegree(e_type1)
        POST-ACCUM t.@similarity = t.@intersection_size*1.0/(@@set_size_A + t.@set_size_B - t.@intersection_size)
        ORDER BY t.@similarity DESC
        LIMIT top_k;

        f.println("Vertex1", "Vertex2", "Similarity");
        others = SELECT s FROM others:s
            POST-ACCUM f.println(source, s, s.@similarity);
}
