*ACCM**SUB* CREATE QUERY kcore_sub*EXT* (STRING vertexType, STRING edgeType, INT verbosity) FOR GRAPH *graph* RETURNS (MapAccum<INT, SetAccum<VERTEX>>)  {
/* An implementation of Algorithm 2 in
 * Scalable K-Core Decomposition for Static Graphs Using a Dynamic Graph Data Structure,
 * Tripathy et al., IEEE Big Data 2018.
 * Returns a map <k, <vertex-list>> where <vertex-list> are those who are in that k-core but not (k+1)-core
 */
  
  SetAccum<VERTEX> @@Q;    // queue of vertices removed per peel
	SetAccum<VERTEX> @@Vb;    // batch of vertices to delete in this round
	SumAccum<INT> @deg;        // The number of edges v has to active vertices.
	SumAccum<INT> @core;       // The core level of vertex v
  OrAccum @flag;				    // true if v does not exist in Gcum
	MapAccum<INT, SetAccum<VERTEX>> @@coreListMap;  // List of vertices sorted by increasing core level
 	
  //OrAccum @color;				    // true if v will be pruned this iteration
	INT k = 0;				      // max degree value used to determine whether to prune
	INT num_active;
	
	V = {vertexType.*};
	V = SELECT v                  // Initialize @deg
	    FROM V:v
	    POST-ACCUM v.@deg += v.outdegree()
	    ORDER BY v.@deg;
	IF verbosity > 0 THEN        // Show initial vertex degrees
	  PRINT "Init", V[V.@deg];
	END;
	
	num_active = V.size();
	WHILE num_active > 0 DO
	    @@Vb.clear();
	    V = SELECT v 
	        FROM V:v
	        WHERE v.@flag == False
          POST-ACCUM IF v.@deg <= k THEN  // Find vertices whose degree < or = k
	            v.@flag += True,               // Mark those vertices individually
	            v.@core += k,                  // Set the core level of those vertices
		          @@Vb += v,                     // Collect those vertices
	            @@Q += v
	        END
	    ;
      num_active = num_active - @@Vb.size();
	
	    IF @@Vb.size() > 0 THEN                // "Remove adjacent edges"         
	        VBatch = @@Vb;
	        U = SELECT u
	            FROM VBatch:u -(edgeType:e)-> :v
	            ACCUM u.@deg += -1, v.@deg += -1;  // Actually, reduce degree of vertices
	    ELSE                     // Finished with this value of k
	        IF verbosity > 0 THEN PRINT k, @@Q; END;
	        @@coreListMap += (k -> @@Q);
	        k = k + 1;
	        IF num_active > 0 THEN
	            @@Q.clear();
	        END;
	    END;
  END;
	IF @@coreListMap.size() <= k THEN  // haven't added the last batch to @@coreList yet
	    @@coreListMap += (k -> @@Q);
	END;
  RETURN @@coreListMap;
  
  }
  
*ACCM*CREATE QUERY kcore_max*EXT* (STRING vertexType, STRING edgeType, BOOL inducedEdges, INT verbosity) FOR GRAPH *graph* {
/* An implementation of Algorithm 2 in
 * Scalable K-Core Decomposition for Static Graphs Using a Dynamic Graph Data Structure,
 * Tripathy et al., IEEE Big Data 2018.
 */
 
 	MapAccum<INT, SetAccum<VERTEX>> @@coreListMap; // Map <k, k-core_vertex_set>
	SetAccum<VERTEX> @@kcoreVertices;              // vertex set for kMax
	ListAccum<EDGE> @@inducedEdges;                // optional output
	INT k;
	
 	@@coreListMap += kcore_sub*EXT*(vertexType, edgeType, verbosity); // get vertex core numnbers
	k = @@coreListMap.size() - 1;
	@@kcoreVertices = @@coreListMap.get(k);   
	coreV = @@kcoreVertices;
	
	// Print the results
	IF verbosity > 0 THEN PRINT "verbosity", @@coreListMap; END;
	PRINT k, @@kcoreVertices.size(), @@kcoreVertices;
  	IF inducedEdges THEN
      		Q = SELECT s FROM coreV:s -(edgeType:e)-> :t WHERE t IN @@kcoreVertices
	        	ACCUM @@inducedEdges += e;
	    	PRINT @@inducedEdges;
	END;
}
  
 
