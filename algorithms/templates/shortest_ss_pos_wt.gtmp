*ATTR*CREATE QUERY shortest_ss_pos_wt*EXT* (VERTEX<*vertex-types*> source) FOR GRAPH *graph* {
*ACCM*CREATE QUERY shortest_ss_pos_wt*EXT* (VERTEX<*vertex-types*> source, BOOL display) FOR GRAPH *graph* {
*FILE*CREATE QUERY shortest_ss_pos_wt*EXT* (VERTEX<*vertex-types*> source, STRING filepath) FOR GRAPH *graph* {
/* The Bellman-Ford algorithm for single-Source Shortest Path 
   on directed/undirected graph with positive weight.
   It will not detect negative cycle in this algorithm. 
*/
        TYPEDEF TUPLE<FLOAT dist, VERTEX pred> pathTuple;    
        HeapAccum<pathTuple>(1, dist ASC) @minPath;
        ListAccum<VERTEX> @path;                 # shortest path FROM source
*ACCM*  SetAccum<EDGE> @@edgeSet;               # list of all edges, if display is needed
        OrAccum @visited;
*FILE*  FILE f(filepath);
        STRING sourceName;
        INT iter;
        BOOL negativeCycle;
        total = {source};                       # the connected vertices
        start = {source};

              
        ##### Get the connected vertices
        start = SELECT s
                FROM start:s
                ACCUM s.@minPath += pathTuple(0, s),
                      s.@visited = TRUE,
                      s.@path += s;
        WHILE start.size() > 0 DO
                start = SELECT t
                        FROM start:s -(*edge-types*:e)-> :t
                        WHERE NOT t.@visited
                        ACCUM t.@visited = TRUE;
                total = total UNION start;
        END;
        
  ##### Do V-1 iterations: Consider whether each edge lowers the best-known distance.
        iter = total.size() - 1;    # the max iteration is V-1
        WHILE TRUE LIMIT iter DO 
                tmp = SELECT s
                      FROM total:s -(*edge-types*:e)-> :t
                      ACCUM 
                            IF s.@minPath.size()>0 AND s.@minPath.top().dist < GSQL_INT_MAX THEN
                                t.@minPath += pathTuple(s.@minPath.top().dist + e.*edge-weight*, s)
                            END;     
        END;
        
  ##### Calculate the paths #####
        start = {source};
        tmp = SELECT s
              FROM total:s
              WHERE s != source
              ACCUM s.@visited = FALSE;
        WHILE start.size() > 0 LIMIT iter DO # Limit the number of hops
                start = SELECT t
                        FROM start:s -(*edge-types*:e)-> :t
                        WHERE NOT t.@visited
                        ACCUM IF s == t.@minPath.top().pred THEN 
                                  t.@visited = TRUE,
                                  t.@path += s.@path,
                                  t.@path += t
                              END;
        END;
          
  ##### Print the results #####
*ATTR*  total = SELECT s
*ATTR*          FROM total:s
*ATTR*          POST-ACCUM s.*vFltAttr* = s.@minPath.top().dist;
*ACCM*  PRINT total[total.@minPath.top().dist, total.@path];
*ACCM*  IF display THEN
*ACCM*          tmp = SELECT s
*ACCM*                FROM total:s -(*edge-types*:e)-> :t
*ACCM*                ACCUM @@edgeSet += e;
*ACCM*          PRINT @@edgeSet;
*ACCM*  END;
*FILE*  f.println("Vertex_ID","Distance","Shortest_Path");
*FILE*  total = SELECT s FROM total:s
*FILE*          POST-ACCUM f.println(s, s.@minPath.top().dist, s.@path);
}
